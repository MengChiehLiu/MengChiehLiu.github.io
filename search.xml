<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo！用Hexo在GitHub Pages上架設個人部落格吧！(1)</title>
    <url>/2023/03/14/Hello-Hexo-1/</url>
    <content><![CDATA[<h1 id="Hexo-介紹"><a href="#Hexo-介紹" class="headerlink" title="Hexo 介紹"></a>Hexo 介紹</h1><p>Hexo 是一個基於Node.js 的自動化部落格部署框架，有近400種網頁主題可供選擇，支援Markdown語言撰寫文章內容而且部署相當迅速，簡直是自己架設部落格的必備神器呀！什麼？你說之前沒用過Node.js怎麼辦？沒關係，因為我之前也沒用過XD。事實上，只要掌握幾個基本的指令，就能夠架出漂漂亮亮、功能齊全的個人部落格囉！就讓我們一起看下去吧～<br>Hexo 官網：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>Hexo GitHub：<a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p>
<span id="more"></span>

<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><ul>
<li><p>安裝 Node.js<br>官方載點：<a href="https://nodejs.org/zh-tw/download/">https://nodejs.org/zh-tw/download/</a></p>
<blockquote>
<p>進入網站後選擇LTS版本，然後選擇下載安裝程式，我自己是用Windows作業系統，直接點擊Windows icon就開始下載了，下載好後打開安裝程式一路確認到最後就安裝好啦～安裝完成後可以用 <code>npm --version</code> 來確認是否安裝成功。<br><img src="/../images/20230314/nodejs.png" alt="Node.js"></p>
</blockquote>
</li>
<li><p>安裝 git<br>官方載點：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<blockquote>
<p>選擇對應的作業系統直接下載就好～這裡一樣以Windows為例，選擇的是Standalone Installer下的64-bit Git for Windows Setup，下載好後打開安裝程式一路確認到最後就安裝好啦～安裝完成後可以用 <code>git --version</code> 來確認是否安裝成功。<br><img src="/../images/20230314/git.png" alt="git"></p>
</blockquote>
</li>
<li><p>註冊GitHub帳號<br>官網連結：<a href="https://github.com/">https://github.com/</a></p>
</li>
</ul>
<h1 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h1><ul>
<li><p>安裝 Hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化資料夾，並將當前路徑移動到該資料夾下(blog 是資料夾名稱，可以改成自己喜歡的名字)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure>
</li>
<li><p>下載 Hexo 所需套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<p>做完上面這些步驟後，我們就可以啟動伺服器來看看目前部落格的樣子囉。</p>
<ul>
<li>啟動伺服器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server #or</span><br><span class="line">hexo s      </span><br></pre></td></tr></table></figure>
<blockquote>
<p>預設主題是landscape，也可以使用其他主題，下一篇文章會教大家如何套用Hexo上的熱門主題nexT！<br><img src="/../images/20230314/landscape.png" alt="landscape"></p>
</blockquote>
</li>
</ul>
<h1 id="Hexo-架構"><a href="#Hexo-架構" class="headerlink" title="Hexo 架構"></a>Hexo 架構</h1><p>在開始加工我們的網站之前，先來認識一下Hexo的資料夾架構！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">|   ├── draft</span><br><span class="line">|   ├── page</span><br><span class="line">|   └── post</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">|   └── yourTheme</span><br><span class="line">|       └── _config.yml</span><br><span class="line">└── _config.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>package.json<br>用來存放node.js的各種套件，一班情況下不太需要動到這個資料夾。</li>
<li>scaffolds<br>鷹架資料夾，裡面有三個檔案draft、page與post，分別對應了我們能建立的三種佈局，Hexo會依據這些佈局來生成新的頁面。</li>
<li>source<br>來源資料夾，用來存放文章、頁面以及圖片等內容，其中_drafts用來存放草稿，_posts用來存放已經發布的文章。</li>
<li>themes<br>主題資料夾，可以下載自己喜歡的主題放到裡面，在每個主題底下會有一個與主題設定檔，與主題有關的東西都在那裡進行設定。</li>
<li>_config.yml<br>網頁設定檔，與網頁有關的東西都在這裡進行設定。 (跟主題設定檔不一樣！)</li>
</ul>
<h1 id="Config-設置"><a href="#Config-設置" class="headerlink" title="Config 設置"></a>Config 設置</h1><p>進到_config.yml檔案中，對Site部分進行修改，可以參考下面的設置：</p>
<blockquote>
<p>subtitle跟description可寫可不寫<br>language預設是英文，可以改成zh-TW顯示繁體中文<br>keyword跟Google關鍵字搜尋有關，這裡先忽略不管他，未來有機會再來詳細介紹！<br><img src="/../images/20230314/config_site.png" alt="config_site"></p>
</blockquote>
<h1 id="撰寫文章-x2F-新增頁面"><a href="#撰寫文章-x2F-新增頁面" class="headerlink" title="撰寫文章&#x2F;新增頁面"></a>撰寫文章&#x2F;新增頁面</h1><p>在Hexo當中共有三種佈局，分別是draft、post與page，其中draft跟page屬於文章，page則屬於頁面。</p>
<ul>
<li><p>post<br>所有draft都會被存放在_posts資料夾當中，會出現在網頁上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># post 可以省略</span><br><span class="line">hexo new post &quot;My Post&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>draft<br>draft是草稿，會另外從放於_drafts資料夾下，且不會出現在網頁上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;My Draft&quot;</span><br></pre></td></tr></table></figure>
<p>可以用指令將draft轉成post，原理只是換個資料夾而已，其實也可以手動作，反過來手動把post丟到draft也行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish &quot;My Draft&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>page<br>page是功能頁面，常見的有about、tags、categories等，下一篇文章就會介紹如何在nexT主題下建立對應的page！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;My Page&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="生成靜態文件"><a href="#生成靜態文件" class="headerlink" title="生成靜態文件"></a>生成靜態文件</h1><p>每次修改config檔或是寫完文章後，記得不要忘記重新生成一次網頁的靜態文件，不然剛剛做的變動網頁上是不會呈現出來的喔！</p>
<ul>
<li><p>清空原本的靜態文件&#x2F;暫存<br>這個步驟相當重要！否則容易出現新加的東西更新不上去的情況。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clear #or</span><br><span class="line">hexo cl</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成靜態文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate #or</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>做完記得打開server確認一下結果！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server #or</span><br><span class="line">hexo s </span><br></pre></td></tr></table></figure></li>
</ul>
<p>這三個指令<br>非常重要！！！<br>非常重要！！！<br>非常重要！！！<br>簡單來說有動到東西請執行一下就對了！</p>
<h1 id="部署至-GitHub-Pages"><a href="#部署至-GitHub-Pages" class="headerlink" title="部署至 GitHub Pages"></a>部署至 GitHub Pages</h1><ol>
<li><p>在GitHub中創建一個新的repository (點右上角加號)<br><img src="/../images/20230314/repository.png" alt="repository"></p>
</li>
<li><p>repository名稱取為<code>user_name.github.io</code>，然後直接create repository<br><img src="/../images/20230314/repository_create.png" alt="repository_create"></p>
</li>
<li><p>修改網頁_config.yml中的URL設置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://user_name.github.io/</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure>
<blockquote>
<p>這裡的url是GitHub Pages的網址<br>root設成 &#x2F;<br><img src="/../images/20230314/config_url.png" alt="config_url"></p>
</blockquote>
</li>
<li><p>修改網頁_config.yml中的deploy設置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/user_name/user_name.github.io.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>這裡選擇用HTTPS的方式連結，部署時直接輸入帳號密碼就行，也可以用SSH，不過就要設置金鑰，比較麻煩一些<br><img src="/../images/20230314/config_deploy.png" alt="config_deploy"></p>
</blockquote>
</li>
<li><p>修改完後記得重新生成一次靜態文件</p>
</li>
<li><p>開始部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy #or</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>打開GitHub Pages的網址就能看到我們剛剛部署上去的網頁啦！<br><img src="/../images/20230314/gitpage.png" alt="Alt text"></p>
</li>
</ol>
<h1 id="預告"><a href="#預告" class="headerlink" title="預告"></a>預告</h1><p>下一篇文章我將會介紹如何套用nexT主題，除了講解外觀設定以外，也將帶著大家打造標籤頁及站內搜尋等功能！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo！套用NexT主題打造個性化部落格頁面！(2)</title>
    <url>/2023/03/15/Hello-Hexo-2/</url>
    <content><![CDATA[<h1 id="NexT-介紹"><a href="#NexT-介紹" class="headerlink" title="NexT 介紹"></a>NexT 介紹</h1><p>NexT是一個相當受歡迎的Hexo主題，外觀簡潔、功能強大，且持續有在維護，今天會教大家如何套用NexT主題，並啟用標籤頁及站內搜尋等功能。<br>NexT 官網：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a><br>NexT GitHub：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p>
<span id="more"></span>

<h1 id="安裝-NexT"><a href="#安裝-NexT" class="headerlink" title="安裝 NexT"></a>安裝 NexT</h1><p>有兩個方法，第一個方法是透過npm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>第二個方法是透過git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>我個人是喜歡第二種方法(git)，因為資源為自動進到themes資料夾當中，如果使用第二種方法(npm)的話資源會跑到node_modules資料夾中，雖然在功能上不會有差異，但未來要對主題的config檔做調整時要找比較久。</p>
<h1 id="套用主題"><a href="#套用主題" class="headerlink" title="套用主題"></a>套用主題</h1><p>到<strong>網頁</strong>的config檔(<code>/_config.yml</code>)，搜尋<strong>theme</strong>將主題設置成next就行了。<br><img src="/../images/20230315/config_theme.png" alt="config_theme"></p>
<p>另外Next其實有提供4種版面可以做選擇，分別是：💟 <a href="https://theme-next.js.org/muse/">Muse</a> | 🔯 <a href="https://theme-next.js.org/mist/">Mist</a> | ♓️ <a href="https://theme-next.js.org/pisces/">Pisces</a> | ♊️ <a href="https://theme-next.js.org/">Gemini</a></p>
<p>大家可以點擊連結看看自己喜歡哪種版面，預設是使用Muse，如果要做更改的話，到<strong>主題</strong>的config檔(<code>themes/next/_config.yml</code>)中搜尋<strong>Schemes</strong>，將喜歡的佈局取消註解就可以了，另外下面的<strong>darkmode</strong>改成true的話則是可以讓網頁變成黑色模式。<br><img src="/../images/20230315/next_schemes.png" alt="next_schemes"></p>
<p>NexT也支援canvas背景動畫，我們可以在<strong>主題</strong>config檔搜尋<strong>canvas_ribbon</strong>，將下方的enable改為true，部屬後網頁背景就會出現酷炫的彩色絲帶動畫了～</p>
<h1 id="添加頭像-avatar"><a href="#添加頭像-avatar" class="headerlink" title="添加頭像 avatar"></a>添加頭像 avatar</h1><ol>
<li>把準備好的圖片放入<code>source/images</code>當中。</li>
<li>在<strong>主題</strong>config檔搜尋<strong>avatar</strong>，修改成自己準備的圖片路徑或者修改圖片名稱使其一致。<blockquote>
<p>rounded改成true的話頭像會是圓形，rotated改成true的話滑鼠移到頭像上時會有快速旋轉的動畫。<br><img src="/../images/20230315/next_avatar.png" alt="next_avatar"></p>
</blockquote>
</li>
</ol>
<h1 id="更改網站圖示-favicon"><a href="#更改網站圖示-favicon" class="headerlink" title="更改網站圖示 favicon"></a>更改網站圖示 favicon</h1><p>我們可以把網站圖示換成自己的圖片，官方文件中建議可以使用<a href="https://realfavicongenerator.net/">Favicon Generator</a>來生成客製化的網站圖示。</p>
<ol>
<li>把準備好的圖片放入<code>source/images</code>當中。</li>
<li>在<strong>主題</strong>config檔搜尋<strong>favicon</strong>，修改成自己準備的圖片路徑或者修改圖片名稱使其一致。<br><img src="/../images/20230315/next_favicon.png" alt="next_favicon"></li>
</ol>
<h1 id="社群媒體連結-social-link"><a href="#社群媒體連結-social-link" class="headerlink" title="社群媒體連結 social link"></a>社群媒體連結 social link</h1><p>在<strong>主題</strong>config檔搜尋<strong>social</strong>，將自己的社群媒體連結填入並取消註解就可以了，下方的social_icon則可以設定是否顯示icon及icon外觀。<br><img src="/../images/20230315/next_social.png" alt="next_social"></p>
<p>Hexo NexT使用<a href="https://fontawesome.com/icons">Font Awesome</a>提供的icons，因此我們可以為新的連結挑選適合的icon，接下來我們來新增一個Linkedin連結看看(包含icon)。</p>
<ol>
<li>先到Font Awesome上搜尋Linkedin，選擇自己喜歡的icon，複製綠色的那段文字。<br><img src="/../images/20230315/font_awesome_linkedin.png" alt="font_awesome_linkedin"></li>
<li>依<code>標題: 連結 || 綠色文字</code>的格式在social下加入新的一行，舉例來說。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linkedin: https://www.linkedin.com/in/meng-chieh-liu-615952235/ || fa-brands fa-linkedin</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="啟用功能選單-Menu"><a href="#啟用功能選單-Menu" class="headerlink" title="啟用功能選單 Menu"></a>啟用功能選單 Menu</h1><p>在<strong>主題</strong>config檔搜尋<strong>menu</strong>，可以看到NexT預先幫我們建立好許多功能選單，其中home跟archives是預設就開啟的，我們可以取消註解來啟用其他功能選單，但目前那些頁面還是空的喔！所以我們的下一步就是要建立相應的分頁。<br><img src="/../images/20230315/next_menu.png" alt="next_menu"></p>
<p>這邊介紹如何建立tags&#x2F;categories頁面：</p>
<ol>
<li><p>建立新頁面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到<code>source/tags/index.md</code>檔案，在檔案中加入<code>type: &quot;tags&quot;</code>，注意這裡的tags要加<strong>雙引號</strong>！！！<br>(categories比照辦理)<br><img src="/../images/20230315/tags.png" alt="tags"></p>
</li>
<li><p>在post裡面加入tags&#x2F;categories，重新部署後這些tags&#x2F;categories就會出現對應的頁面上啦～<br><img src="/../images/20230315/post_tags.png" alt="post_tags"></p>
</li>
</ol>
<h1 id="站內搜尋功能-local-search"><a href="#站內搜尋功能-local-search" class="headerlink" title="站內搜尋功能 local search"></a>站內搜尋功能 local search</h1><ol>
<li><p>安裝<code>hexo-generator-searchdb</code>套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<strong>主題</strong>config檔搜尋<strong>local_search</strong>，將enable調為true。<br><img src="/../images/20230315/next_local_search.png" alt="next_local_search"></p>
</li>
<li><p>在<strong>網頁</strong>config檔加入下面設置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新部署後就能開始使用站內搜尋啦～<br><img src="/../images/20230315/local_search.png" alt="local_search"></p>
</li>
</ol>
<h1 id="預告"><a href="#預告" class="headerlink" title="預告"></a>預告</h1><p>下一篇文章將會帶大家做SEO，設定keywords與sitemap讓Google搜的到我們的部落格&#x2F;文章。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Implement Trie (字典樹)</title>
    <url>/2023/03/18/trie/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在寫LeetCode每日一題時遇到<a href="https://leetcode.com/problems/implement-trie-prefix-tree/description/">208. Implement Trie (Prefix Tree)</a>，之前因為覺得Trie好像很難所以一直不願面對，但這題就是要跟Trie的直球對決了想躲也躲不掉XD，Anyway，看了一下發現Trie其實蠻好理解的，今天就來認識一下Trie，然後看看這一題可以怎麼寫吧！(Python, C++)</p>
<span id="more"></span>

<h1 id="Trie-介紹"><a href="#Trie-介紹" class="headerlink" title="Trie 介紹"></a>Trie 介紹</h1><p>Trie的中文可以叫做字典樹、字首樹或前綴樹，顧名思義是一種樹狀結構，常被用來檢索文本中的單詞或前綴(prefix)。</p>
<p>字典樹有幾個性質，這裡搭配下方圖片做介紹：</p>
<ol>
<li>每個節點代表一個字符，並且單字的結尾有標記，舉例來說單字”ten”會依序經過t、e、n三個節點，其中n是結尾(綠色)。</li>
<li>節點是可以被共用的，舉例來說”sun”及”sup”就共用了s、u兩個節點。</li>
<li>葉子節點一定是單字結尾，但非葉節點也可以是結尾，舉例來說”an”及”and”分別是兩個單字，其中n及d都是單字的結尾(綠色)。</li>
</ol>
<p><img src="/../images/20230318/trie.png" alt="trie"><br>字典樹的優點是可以快速查找字符串，且可以按照字典序進行排序。但缺點是需要較大的空間來存儲，且插入和刪除操作相對較慢。</p>
<h1 id="實作-Trie"><a href="#實作-Trie" class="headerlink" title="實作 Trie"></a>實作 Trie</h1><p>實作的內容就是一開始提到的LeetCode 208，簡單來說就是要做出初始化、插入、尋找及尋找前綴4個功能，詳細題目可以自己到LeetCode去看。</p>
<p>值得一提的是，Trie 有兩種實作方法，第一個方法相當直覺，就是用指針連結各個節點來模擬出一個樹狀結構；第二個方法則是動態語言限定，我們可以直接用hash table來儲存字符，接下來分別用C++及Python來演示這兩種方法。</p>
<h2 id="方法一-Pointers-C"><a href="#方法一-Pointers-C" class="headerlink" title="方法一: Pointers (C++)"></a>方法一: Pointers (C++)</h2><p>重點</p>
<ul>
<li>英文字母只有26個，所以可以直接使用array，以index(<code>w-&#39;a&#39;</code>)來表示字符。</li>
<li>prefix的部分只要節點存在就OK，但search的部分還要檢查是不是結尾。</li>
<li>另外定義一個struct而不是直接new原本的class，是因為struct的結構比class簡單的多(沒有function)，可以提升執行效率。</li>
<li>使用靜態宣告(array)所以不用擔心memory leak。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">  Node* children[<span class="number">26</span>];</span><br><span class="line">  <span class="type">bool</span> is_word = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Node* curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> w: word) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        curr-&gt;is_word = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Node* curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> w: word) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr == <span class="literal">NULL</span> || curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr-&gt;is_word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        Node* curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> w: prefix) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="方法二-Hash-Table-Python"><a href="#方法二-Hash-Table-Python" class="headerlink" title="方法二: Hash Table (Python)"></a>方法二: Hash Table (Python)</h2><p>重點</p>
<ul>
<li>用特殊符號(#)來標記單字結尾。</li>
<li>因為動態語言中的資料型態是動態決定的，所以Hash Table內可以同時儲存不同資料型態(存下一層&#x2F;存結尾)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        curr = self._root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> curr:</span><br><span class="line">                curr[w] = &#123;&#125;</span><br><span class="line">            curr = curr[w]</span><br><span class="line">        curr[<span class="string">&quot;#&quot;</span>] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        curr = self._root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> curr:</span><br><span class="line">                curr = curr[w]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> curr.get(<span class="string">&quot;#&quot;</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        curr = self._root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> curr:</span><br><span class="line">                curr = curr[w]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h1 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h1><p><a href="/2023/03/20/trie-2/">Trie (字典樹) - Design Add and Search Words Data Structure</a></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Trie的基本觀念說實在還蠻簡單的，難應該是難在之後的應用，之後有機會看能不能更新一些進階的觀念，像是搜尋引擎之類的。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.youtube.com/watch?v=f48wGD-MuQw">https://www.youtube.com/watch?v=f48wGD-MuQw</a></p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie (字典樹) - Design Add and Search Words Data Structure</title>
    <url>/2023/03/20/trie-2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>寫完上一篇<a href="/2023/03/18/trie/">Implement Trie (字典樹)</a>後，沒過兩天LeetCode每日一題又出現Trie的題目了(笑)，題目是<a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/">211. Design Add and Search Words Data Structure</a>，簡單來說就是字典樹加上一點正規表達(regular expression)的概念，舉例來說trie裡有<code>bad</code>，那搜尋<code>b.d</code>的話也要回傳<code>true</code>，詳細題目一樣自己到LeetCode去看囉。</p>
<span id="more"></span>

<h1 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h1><p>如果不考慮正規表達的話，那其實就是最基本的Trie，還不了解trie的話可以參考前一篇文章！但現在多了這個特殊條件後，我們就需要去考慮所有可能，方法是寫一個dfs(Depth First Search)的輔助函式，遇到<code>.</code>的話就將當前節點下的所有子節點再帶入dfs，看最後有沒有符合的單字，只要有其中一個子節點符合的話會提前回傳<code>true</code>，都沒有的話就回傳<code>false</code>。</p>
<p>我們以下面的圖片來說明步驟，假設我們今天搜尋<code>b.t</code>：</p>
<ol>
<li>跟一般的trie一樣，我們會先確認root下有沒有b這個節點，有的話就走到這個節點上。</li>
<li>因為第二個字是<code>.</code>，表示<code>ba</code>跟<code>bo</code>都是我們可以走的路徑，因此我們兩條路都要去訪問，依字母順序我們先訪問<code>ba</code>。</li>
<li><code>ba</code>下面雖然有節點<code>bat</code>，但他不是單字的結尾，所以我們跳出這條路徑。</li>
<li>我們回到上一層，改走<code>bo</code>這條路徑。</li>
<li><code>bot</code>符合我們要找的答案，並且他也是單字的結尾，因此回傳<code>true</code>。</li>
</ol>
<p><img src="/../images/20230320/trie.png" alt="trie"></p>
<h1 id="方法一-Pointers-C"><a href="#方法一-Pointers-C" class="headerlink" title="方法一: Pointers (C++)"></a>方法一: Pointers (C++)</h1><p>重點</p>
<ul>
<li>dfs除了要傳入節點<code>curr</code>，也要記錄目前走到第單字中的第幾個位置<code>start</code>。</li>
<li>遇到<code>.</code>的話就對所有可能路徑再做一次dfs。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Node* children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> is_end = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string word;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(Node* curr, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=start; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="comment">// 遇到 .</span></span><br><span class="line">            <span class="keyword">if</span> (word[i] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 用迴圈造訪所有可能路徑</span></span><br><span class="line">                <span class="keyword">for</span> (Node* next: curr-&gt;children)&#123;</span><br><span class="line">                    <span class="comment">// 路徑不可為空 &amp;&amp; 該路徑有符合答案者</span></span><br><span class="line">                    <span class="keyword">if</span> (next!=<span class="literal">nullptr</span> &amp;&amp; <span class="built_in">dfs</span>(next, i+<span class="number">1</span>))&#123;</span><br><span class="line">                        <span class="comment">// 提前回傳 true</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 全部路徑無答案，回傳 false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (curr-&gt;children[word[i]-<span class="string">&#x27;a&#x27;</span>] != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                curr = curr-&gt;children[word[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr-&gt;is_end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WordDictionary</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Node* curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> w: word)&#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr-&gt;children[w-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        curr-&gt;is_end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;word = word;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(root, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="方法二-Hash-Table-Python"><a href="#方法二-Hash-Table-Python" class="headerlink" title="方法二: Hash Table (Python)"></a>方法二: Hash Table (Python)</h1><p>重點</p>
<ul>
<li>注意要避開<code>#</code>因為他不是一個路徑，否則會報錯。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWord</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> curr:</span><br><span class="line">                curr[w] = &#123;&#125;</span><br><span class="line">            curr = curr[w]</span><br><span class="line">        curr[<span class="string">&quot;#&quot;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(word)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">curr, start</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n):</span><br><span class="line">                w = word[i]</span><br><span class="line">                <span class="comment"># 遇到 .</span></span><br><span class="line">                <span class="keyword">if</span> w == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="comment"># 用迴圈造訪所有可能路徑</span></span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> curr:</span><br><span class="line">                        <span class="comment"># 避開結尾標記 &amp;&amp; 該路徑有符合答案者</span></span><br><span class="line">                        <span class="keyword">if</span> c!=<span class="string">&quot;#&quot;</span> <span class="keyword">and</span> dfs(curr[c], i+<span class="number">1</span>):</span><br><span class="line">                            <span class="comment"># 提前回傳 true</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 全部路徑無答案，回傳 false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> w <span class="keyword">in</span> curr:</span><br><span class="line">                    curr = curr[w]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> <span class="keyword">in</span> curr</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(self.root, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>深入瞭解社會網絡分析中的介數中心性(Betweenness Centrality) - 計算方法與Python程式實作</title>
    <url>/2023/03/29/betweenness-centrality/</url>
    <content><![CDATA[<h1 id="介數中心性-Betweenness-Centrality"><a href="#介數中心性-Betweenness-Centrality" class="headerlink" title="介數中心性 Betweenness Centrality"></a>介數中心性 Betweenness Centrality</h1><p><img src="/../images/20230329/Betweenness_Centrality.png" alt="Betweenness Centrality"></p>
<p>介數中心性（Betweenness Centrality）是社會網絡分析中常用的一種指標，用於度量一個節點在整個網絡中扮演了多重要的角色，簡單來說，介數中心性指標評估了一個節點在網絡中擔任了多少條<strong>最短路徑</strong>的中介者角色。</p>
<p>更白話一點，介數中心性看的是一個節點有<strong>多常被其他人經過</strong>，舉例來說：某些公車站點連接了不同的公車路線，這些公車站點對於連接整個公車網絡起著重要的作用，如果這些公車站發生了任何問題，整個公車路線都會受到影響。這些公車站點就是具有高介數中心性的節點。</p>
<span id="more"></span>

<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p>介數中心性公式：<br><img src="/../images/20230329/formula.png" alt="Betweenness Centrality Formula"></p>
<p>其中，𝜎(sigma)表示最短路徑的數量，分母的意思是從點s到點w的最短路徑的數量，分子的意思是從點s到點w的最短路徑中經過v點的數量，聽起來有點抽象，我們用下面這張圖來解釋：</p>
<blockquote>
<p><img src="/../images/20230329/simple_network.png" alt="Simple Network"><br>從s點到w點的最短路徑總共有4條，分別是<br><code>s -&gt; 1 -&gt; v -&gt; w</code><br><code>s -&gt; 2 -&gt; v -&gt; w</code><br><code>s -&gt; 3 -&gt; v -&gt; w</code><br><code>s -&gt; 3 -&gt; 4 -&gt; w</code><br>所以分母就是4，其中經過v的有三條，所以分子就是3，<code>3 / 4 = 0.75</code>，能算出在s到w的路徑中，v的介數中心性就是0.75。<br>但要注意的是網絡中的任一點都有可能是s或是w，因此若要計算整個網絡當中v的中心性，我們要將網絡中的所有組合加總(Σ)才能得到最後的結果。</p>
</blockquote>
<p>聰明的你可能會發現網絡中的節點越多，算出來的值也越大(因為是加總)，因此，為了讓不同網絡之間能被拿來比較，我們要對其進行標準化。</p>
<p>標準化公式：<br><img src="/../images/20230329/normalization_formula.png" alt="Normalization Formula"></p>
<p>其中，分母是Binomial Coefficient，指的是一個網絡的最大可能介數中心性(網路中任選兩點、n取2)：<br><img src="/../images/20230329/binomial_coefficient.png" alt="Binomial Coefficient"></p>
<p>(上面標準化公式的假設是網絡是沒有方向性的，如果有方向性的話就不用除2了。)</p>
<h1 id="Python-實作"><a href="#Python-實作" class="headerlink" title="Python 實作"></a>Python 實作</h1><p>網路上很多有關Betweenness Centrality的教學都是直接套<code>networkx</code>套件，但對於程式邏輯究竟如何實現卻是著墨很少，因此接下來要以不用套件的方式來實現unweighted graph中Betweenness Centrality的計算！</p>
<p>我們先來看看Pseudo Code:<br><img src="/../images/20230329/pseudo_code.webp" alt="Pseudo Code for Betweenness Centrality"></p>
<p>看了霧煞煞?沒關係，來解釋一下變數的意涵：</p>
<blockquote>
<p>s: 起點<br>v: 中介點<br>w: 終點<br>S: stack，後進先出的佇列，用來儲存已經遍歷過的節點<br>P: path，s到w的最短路徑中，所經過的鄰居v<br>σ: sigma，s到其他點的最短路徑的數量<br>d: distance，s到其他點的最短距離<br>Q: queue，先進先出的佇列，用來實現BFS<br>δ: delta，介數中心性 (單一個節點s的結果)<br>C: centrality，介數中心性 (sum of delta)</p>
</blockquote>
<p>程式邏輯其實很簡單，先初始化graph的共用的變數(<code>C</code>)，接著就是對每個節點(<code>for s in graph</code>)做下面三個步驟：</p>
<ol>
<li><p>初始化變量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [] <span class="comment"># stack</span></span><br><span class="line">P = &#123;node: [] <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># path</span></span><br><span class="line">sigma = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># 初始化為-1，因為原點是0</span></span><br><span class="line">sigma[s] = <span class="number">1</span> </span><br><span class="line">d = &#123;node: -<span class="number">1</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># distance</span></span><br><span class="line">d[s] = <span class="number">0</span></span><br><span class="line">Q = deque([s]) <span class="comment"># queue</span></span><br></pre></td></tr></table></figure>
<p>這部分就是根據各個變量的性質去初始化而已，唯一需要注意的是距離(<code>d</code>)一開始要初始化為-1，因為原點會是0。</p>
</li>
<li><p>計算最短路徑 (BFS)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> Q:</span><br><span class="line">    v = Q.popleft()</span><br><span class="line">    S.append(v)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> graph[v]: <span class="comment"># for neighbor in neighbors</span></span><br><span class="line">        <span class="keyword">if</span> d[w] &lt; <span class="number">0</span>: <span class="comment"># 如果遇到新的節點才去更新他的距離</span></span><br><span class="line">            Q.append(w)</span><br><span class="line">            d[w] = d[v] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># -----------------------------------------------       </span></span><br><span class="line">        <span class="keyword">if</span> d[w] == d[v] + <span class="number">1</span>: <span class="comment"># 判斷v是否在s到w的最短路徑中</span></span><br><span class="line">            sigma[w] += sigma[v] <span class="comment"># 透過v去更新w的最短路徑數</span></span><br><span class="line">            P[w].append(v)</span><br></pre></td></tr></table></figure>
<p>在這段程式中，我們可以把他切成兩半，前半段是基本的BFS演算法，比較不一樣的地方在於我們將queue彈出的節點再存入stack中，紀錄所有遍歷過的點；後半段則是從w的鄰居中，去尋找鄰居v是否位於最短路徑當中(透過判斷最短距離是否相差1)，如果是的話那就透過v去更新更新w的sigma，並且將v記錄至w的<code>path</code>中。</p>
</li>
<li><p>計算Betweenness Centrality</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delta = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125;</span><br><span class="line"><span class="comment"># -----------------------------------------------   </span></span><br><span class="line"><span class="keyword">while</span> S:</span><br><span class="line">    w = S.pop() <span class="comment"># 從遍歷過的節點中pop一個</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> P[w]:</span><br><span class="line">        delta[v] += (sigma[v]/sigma[w]) * (<span class="number">1</span> + delta[w])</span><br><span class="line">    <span class="keyword">if</span> w != s:</span><br><span class="line">        C[w] += delta[w]</span><br></pre></td></tr></table></figure>
<p>delta其實也是初始化變量的一部分啦，只是Pseudo Code放在這部分所以寫在這邊。<br>我們將節點從stack中取出來，去更新這些點的Betweenness Centrality，之所以用stack有兩個原因，第一個原因是我們只需要考慮能到達的節點，第二個原因是我們希望由終點往起點去更新。<br>接著我們將每個w的path中的v取出，去更新這些v，sigma[v]&#x2F;sigma[w] 表示經過v的最短路徑數&#x2F;經過w的最短路徑數，乘上(1 + delta[w])的原因在於，目前的介數中心性只考慮了v之於w的影響，加上 (sigma[v]&#x2F;sigma[w]) * delta 便可納入 w 後面節點的影響。<br>最後，針對非起點s的節點，我們將其更新到最終結果中。</p>
</li>
</ol>
<p>標準化的部分雖然不在Oseudo Code中，但一般來說會順便做，方法如同公式的部分提到的，除以<code>((n-1)*(n-2))/2</code>就好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">    C[node] /= ((n-<span class="number">1</span>)*(n-<span class="number">2</span>))/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>完整程式碼：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">betweenness_centrality</span>(<span class="params">graph</span>):</span><br><span class="line"></span><br><span class="line">    C = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># centrality</span></span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍歷每個節點</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="comment"># 1. 初始化變量</span></span><br><span class="line">        S = [] <span class="comment"># stack</span></span><br><span class="line">        P = &#123;node: [] <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># path</span></span><br><span class="line">        sigma = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># 初始化為-1，因為原點是0</span></span><br><span class="line">        sigma[s] = <span class="number">1</span> </span><br><span class="line">        d = &#123;node: -<span class="number">1</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125; <span class="comment"># distance</span></span><br><span class="line">        d[s] = <span class="number">0</span></span><br><span class="line">        Q = deque([s]) <span class="comment"># queue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 計算最短路徑 (BFS)</span></span><br><span class="line">        <span class="keyword">while</span> Q:</span><br><span class="line">            v = Q.popleft()</span><br><span class="line">            S.append(v)</span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> graph[v]: <span class="comment"># for neighbor in neighbors</span></span><br><span class="line">                <span class="keyword">if</span> d[w] &lt; <span class="number">0</span>: <span class="comment"># 如果遇到新的節點才去更新他的距離</span></span><br><span class="line">                    Q.append(w)</span><br><span class="line">                    d[w] = d[v] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> d[w] == d[v] + <span class="number">1</span>: <span class="comment"># 判斷v是否在s到w的最短路徑中</span></span><br><span class="line">                    sigma[w] += sigma[v] <span class="comment"># 透過v去更新w的最短路徑數</span></span><br><span class="line">                    P[w].append(v)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 計算centrality</span></span><br><span class="line">        delta = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> graph&#125;</span><br><span class="line">        <span class="keyword">while</span> S:</span><br><span class="line">            w = S.pop() <span class="comment"># 從遍歷過的節點中pop一個</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> P[w]:</span><br><span class="line">                delta[v] += (sigma[v]/sigma[w]) * (<span class="number">1</span> + delta[w])</span><br><span class="line">            <span class="keyword">if</span> w != s:</span><br><span class="line">                C[w] += delta[w]</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    # Normalization</span></span><br><span class="line"><span class="string">    for node in graph:</span></span><br><span class="line"><span class="string">        C[node] /= ((n-1)*(n-2))/2</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C</span><br></pre></td></tr></table></figure>


<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>如果真的遇到要計算Betweenness Centrality的情況，當然還是直接用<code>networkx</code>套件裡的<code>betweenness_centrality</code>就好了啦，寫這篇單純是因為網路上都找不到有人說明算法的邏輯，所以希望寫這篇能幫助到其他想了解算法的人。<br>要注意上面的算法建立在所有edge的權重都是一樣的情況下，也就是點與點之間不是1就是0的binary關係，那如果每條edge有不同的權重呢?方法其實也不太意外，就是把程式中計算最短路徑的部分換掉就好了，根據實際情況可以選擇Dijkstra或是Bellman–Ford等。</p>
]]></content>
      <categories>
        <category>Social Network Analysis</category>
      </categories>
      <tags>
        <tag>betweenness centrality</tag>
      </tags>
  </entry>
</search>
